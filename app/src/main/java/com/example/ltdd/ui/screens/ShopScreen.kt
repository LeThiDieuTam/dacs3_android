@file:Suppress("UnusedImport")

package com.example.ltdd.ui.screens

import android.app.*
import android.content.Context
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.app.NotificationCompat
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.compose.LocalLifecycleOwner
import androidx.lifecycle.repeatOnLifecycle
import androidx.lifecycle.viewModelScope
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import androidx.work.*
import com.example.ltdd.ui.components.BottomNavigationBar
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*
import java.util.concurrent.TimeUnit

// Import c√°c class t·ª´ c√°c package m·ªõi
import com.example.ltdd.models.ActivityModel
import com.example.ltdd.remote.RetrofitClient
import com.example.ltdd.models.ActivityResponse // C·∫ßn ƒë·ªÉ chuy·ªÉn ƒë·ªïi t·ª´ response API
import com.example.ltdd.models.CompletionResponse
import com.example.ltdd.models.ActivityDayIndexResponse
import com.example.ltdd.models.SaveActivityResponse


// Worker gi·ªØ nguy√™n
class DailyReminderWorker(ctx: Context, params: WorkerParameters) : Worker(ctx, params) {
    override fun doWork(): Result {
        val chId = "reminders"
        val nm = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            nm.createNotificationChannel(
                NotificationChannel(chId, "Thai gi√°o", NotificationManager.IMPORTANCE_DEFAULT)
            )
        }
        val n: Notification = NotificationCompat.Builder(applicationContext, chId)
            .setSmallIcon(android.R.drawable.ic_notification_clear_all)
            .setContentTitle("Nh·∫Øc nh·ªü thai k·ª≥")
            .setContentText("ƒê·ª´ng qu√™n ho·∫°t ƒë·ªông thai gi√°o h√¥m nay!")
            .build()
        nm.notify(1, n)
        return Result.success()
    }
}

// Chuy·ªÉn masterList v√†o ƒë√¢y ƒë·ªÉ d·ªÖ qu·∫£n l√Ω, kh√¥ng c·∫ßn OkHttpClient n·ªØa
private val masterList = listOf(
    "üìñ K·ªÉ chuy·ªán",
    "üéµ Thai gi√°o √¢m thanh",
    "üé® Ngh·ªá thu·∫≠t",
    "üé¨ Xem phim",
    "üíÑ L√†m ƒë·∫πp"
)

// === ViewModel cho ShopScreen ===
class ShopViewModel(private val userId: String) : ViewModel() {

    private val _activities = MutableStateFlow<List<ActivityModel>>(emptyList())
    val activities: StateFlow<List<ActivityModel>> = _activities

    private val _completionPercent = MutableStateFlow(0)
    val completionPercent: StateFlow<Int> = _completionPercent

    private val _activityDayIndex = MutableStateFlow(1)
    val activityDayIndex: StateFlow<Int> = _activityDayIndex

    val doneToday: StateFlow<Int> = MutableStateFlow(0).apply {
        viewModelScope.launch {
            _activities.collect { acts -> value = acts.count { it.isDone } }
        }
    }

    // H√†m loadActivities ban ƒë·∫ßu
    fun loadData(context: Context) = viewModelScope.launch {
        try {
            val currentDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())

            // 1. Fetch Activities
            val serverActivities = RetrofitClient.activityInstance.getDailyActivities(userId, currentDate)
            _activities.value = if (serverActivities.isEmpty()) {
                defaultActivities().also { saveLocally(context, it) }
            } else {
                // Chuy·ªÉn ƒë·ªïi ActivityResponse sang ActivityModel
                val map = serverActivities.associate {
                    it.activity_title to ActivityModel(
                        it.activity_title,
                        it.is_done == 1,
                        if (it.is_done == 1) "ƒê√£ ho√†n th√†nh" else it.description
                    )
                }
                // ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c ho·∫°t ƒë·ªông trong masterList ƒë·ªÅu c√≥ m·∫∑t
                masterList.map { map[it] ?: ActivityModel(it, false, "Ch∆∞a ho√†n th√†nh") }
            }

            // 2. Fetch Completion Percent
            val completionResponse = RetrofitClient.activityInstance.getCompletion(userId, currentDate)
            _completionPercent.value = completionResponse.completion_percentage

            // 3. Fetch Activity Day Index
            val dayIndexResponse = RetrofitClient.activityInstance.getActivityDayIndex(userId, currentDate)
            _activityDayIndex.value = maxOf(1, dayIndexResponse.day_index)

        } catch (e: Exception) {
            Log.e("ShopViewModel", "L·ªói t·∫£i d·ªØ li·ªáu: ${e.message}", e)
            Toast.makeText(context, "L·ªói t·∫£i d·ªØ li·ªáu: ${e.localizedMessage}", Toast.LENGTH_SHORT).show()
            // N·∫øu c√≥ l·ªói, c√≥ th·ªÉ ƒë·∫∑t l·∫°i v·ªÅ defaultActivities ho·∫∑c hi·ªÉn th·ªã tr·∫°ng th√°i l·ªói
            _activities.value = defaultActivities()
            _completionPercent.value = 0
            _activityDayIndex.value = 1
        }
    }

    // H√†m updateAt m·ªõi ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi ViewModel
    fun updateActivityStatus(context: Context, index: Int, updatedActivity: ActivityModel) = viewModelScope.launch {
        try {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ª•c b·ªô ngay l·∫≠p t·ª©c ƒë·ªÉ UI ph·∫£n h·ªìi nhanh
            val currentActivities = _activities.value.toMutableList()
            currentActivities[index] = updatedActivity
            _activities.value = currentActivities

            // G·ª≠i c·∫≠p nh·∫≠t l√™n server
            val currentDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())
            val saveResponse = RetrofitClient.activityInstance.saveActivity(
                action = "save_activity",
                userId = userId,
                activityTitle = updatedActivity.title,
                description = updatedActivity.desc,
                isDone = if (updatedActivity.isDone) 1 else 0,
                activityDate = currentDate
            )
            _completionPercent.value = saveResponse.completion_percentage // C·∫≠p nh·∫≠t ph·∫ßn trƒÉm t·ª´ server

            Toast.makeText(context, "C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông th√†nh c√¥ng!", Toast.LENGTH_SHORT).show()
        } catch (e: Exception) {
            Log.e("ShopViewModel", "L·ªói l∆∞u ho·∫°t ƒë·ªông: ${e.message}", e)
            Toast.makeText(context, "L·ªói l∆∞u ho·∫°t ƒë·ªông: ${e.localizedMessage}", Toast.LENGTH_SHORT).show()
            // Ho√†n l·∫°i tr·∫°ng th√°i n·∫øu l∆∞u th·∫•t b·∫°i (t√πy ch·ªçn)
            val revertedActivities = _activities.value.toMutableList()
            revertedActivities[index] = updatedActivity.copy(isDone = !updatedActivity.isDone, desc = "Ch∆∞a ho√†n th√†nh") // Ho√†n l·∫°i tr·∫°ng th√°i c≈©
            _activities.value = revertedActivities
        }
    }

    private fun defaultActivities() = masterList.map { ActivityModel(it, false, "Ch∆∞a ho√†n th√†nh") }

    private fun saveLocally(ctx: Context, list: List<ActivityModel>) {
        ctx.getSharedPreferences("app_pref", 0).edit().putString(
            "daily_activities",
            org.json.JSONArray().apply { // S·ª≠ d·ª•ng org.json.JSONArray
                list.forEach {
                    put(org.json.JSONObject().apply { // S·ª≠ d·ª•ng org.json.JSONObject
                        put("title", it.title); put("isDone", it.isDone); put("desc", it.desc)
                    })
                }
            }.toString()
        ).apply()
    }
}

// === ViewModelFactory cho ShopViewModel ===
class ShopViewModelFactory(private val userId: String) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(model: Class<T>): T {
        require(model.isAssignableFrom(ShopViewModel::class.java))
        @Suppress("UNCHECKED_CAST")
        return ShopViewModel(userId) as T
    }
}

// === Composable ShopScreen ===
@Composable
fun ShopScreen(navController: NavController, userId: String) {

    val context = LocalContext.current
    val viewModel: ShopViewModel = viewModel(factory = ShopViewModelFactory(userId))
    val lifecycleOwner = LocalLifecycleOwner.current

    val activities by viewModel.activities.collectAsState()
    val completionPercent by viewModel.completionPercent.collectAsState()
    val activityDayIndex by viewModel.activityDayIndex.collectAsState()
    val doneToday by viewModel.doneToday.collectAsState()

    LaunchedEffect(userId) {
        lifecycleOwner.lifecycle.repeatOnLifecycle(androidx.lifecycle.Lifecycle.State.STARTED) {
            viewModel.loadData(context)
        }
    }

    LaunchedEffect(Unit) {
        scheduleReminder(context)
    }

    Scaffold(bottomBar = { BottomNavigationBar(navController, userId) }) { pad ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(pad)
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            item {
                ProgressSection(
                    completionPercent,
                    activityDayIndex,
                    doneToday,
                    activities.size
                )
                Spacer(Modifier.height(16.dp))
            }

            itemsIndexed(activities) { idx, act ->
                ActivityItem(
                    title = act.title,
                    desc = act.desc,
                    isDone = act.isDone
                ) {
                    viewModel.updateActivityStatus(
                        context,
                        idx,
                        act.copy(isDone = true, desc = "ƒê√£ ho√†n th√†nh")
                    )
                }
                Spacer(Modifier.height(8.dp))
            }
        }
    }
}

@Composable
private fun ProgressSection(percent: Int, dayIdx: Int, done: Int, total: Int) {
    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        Box(
            Modifier.size(120.dp).clip(CircleShape).background(Color(0xFFFBEAEA)),
            contentAlignment = Alignment.Center
        ) { Text("$percent%", color = Color(0xFFE57373), fontSize = 28.sp) }

        Spacer(Modifier.height(8.dp))
        Text("Thai gi√°o ng√†y th·ª© $dayIdx", fontSize = 18.sp, fontWeight = FontWeight.Bold)
        Text("M·ª•c ti√™u h√†ng ng√†y c·ªßa m·∫π ƒë√£ g·∫ßn ho√†n th√†nh!", color = Color.Gray, fontSize = 14.sp)
        Text("%02d/%02d ho·∫°t ƒë·ªông trong ng√†y".format(done, total), color = Color.Gray, fontSize = 12.sp)
    }
}

@Composable
private fun ActivityItem(title: String, desc: String, isDone: Boolean, onDone: () -> Unit) {
    Card(
        Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(4.dp)
    ) {
        Column(Modifier.padding(12.dp)) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(title, fontSize = 16.sp, fontWeight = FontWeight.Medium)
                if (isDone) Text("ƒê√£ ho√†n th√†nh", color = Color(0xFF4CAF50), fontSize = 12.sp)
            }
            Spacer(Modifier.height(4.dp))
            Text(desc, fontSize = 13.sp, color = Color.Gray)
            Spacer(Modifier.height(8.dp))
            if (!isDone) {
                Button(
                    onClick = onDone,
                    shape = RoundedCornerShape(50),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF64B5F6)),
                    modifier = Modifier.align(Alignment.End)
                ) { Text("Ho√†n th√†nh", color = Color.White, fontSize = 14.sp) }
            }
        }
    }
}

// H√†m n√†y v·∫´n d√πng ƒë·ªÉ l∆∞u c·ª•c b·ªô, kh√¥ng li√™n quan ƒë·∫øn Retrofit
private fun saveLocally(ctx: Context, list: List<ActivityModel>) {
    ctx.getSharedPreferences("app_pref", 0).edit().putString(
        "daily_activities",
        org.json.JSONArray().apply {
            list.forEach {
                put(org.json.JSONObject().apply {
                    put("title", it.title); put("isDone", it.isDone); put("desc", it.desc)
                })
            }
        }.toString()
    ).apply()
}

// H√†m n√†y v·∫´n d√πng WorkManager, kh√¥ng li√™n quan ƒë·∫øn Retrofit
private fun scheduleReminder(ctx: Context) {
    val req = OneTimeWorkRequestBuilder<DailyReminderWorker>()
        .setInitialDelay(1, TimeUnit.DAYS)
        .build()
    WorkManager.getInstance(ctx).enqueueUniqueWork("daily_reminder", ExistingWorkPolicy.KEEP, req)
}

// C√°c h√†m loadActivities, saveActivityRemote, fetchPercent, fetchActivityDay, request
// ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·∫±ng Retrofit trong ViewModel, n√™n c√≥ th·ªÉ x√≥a ch√∫ng ·ªü ƒë√¢y.

@Preview(showBackground = true)
@Composable
fun PreviewShopScreen() = ShopScreen(rememberNavController(), "1")